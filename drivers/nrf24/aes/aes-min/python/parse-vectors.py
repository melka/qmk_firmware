#!/usr/bin/env python3

import codecs
#from pprint import pprint

key_map = {
    'COUNT': 'count',
    'KEY': 'key',
    'PLAINTEXT': 'plain',
    'CIPHERTEXT': 'cipher',
}

def c_escaped_string(s, encoding='latin'):
    if isinstance(s, str):
        s = s.encode(encoding)
    s = s.decode('latin')
    result = ''
    for c in s:
        if c in '\\"':
            result += '\\' + c
        elif not (32 <= ord(c) < 127):
            result += '\\%03o' % ord(c)
        else:
            result += c
    return '"' + result + '"'

def byte_string_to_c_array_init(byte_string):
    return ", ".join("0x{:02X}".format(c) for c in byte_string)

def vectors_iter(fileobj):
    for line in fileobj:
        line = line.strip()
        if "[ENCRYPT]" in line:
            break
    for line in fileobj:
        line = line.strip()
        if "[DECRYPT]" in line:
            break
        if line.startswith("COUNT"):
            parts = line.split("=")
            count = int(parts[1].strip())
            #yield count
            test_data = { 'count': count }
            for line in fileobj:
                line = line.strip()
                if not line:
                    yield test_data
                    break
                key, valuestr = [ a.strip() for a in line.split("=") ]
                key = key_map.get(key, key)
                value = codecs.decode(valuestr, "hex")
                test_data[key] = value

def files_vectors_iter(filenames):
    for setnum, filename in enumerate(filenames):
        with open(filename, "r") as f:
            for test_data in vectors_iter(f):
                test_data['set'] = setnum
                yield test_data

def main():
    import os.path
    import sys

    filenames = sys.argv[1:]
    vectors_list = []
    set_names = list(filenames)
    #set_names = [ '"', '\\', 'abc']
    print("""
/* This file was generated by Python program {}
from the AES KAT (Known Answer Tests), using the following command:

    {}

This file should not be edited manually.

It is used by tests/aes-vectors-test.c.
*/
""".format(os.path.basename(sys.argv[0]), " ".join(sys.argv)))
    for test_data in files_vectors_iter(filenames):
        #pprint(test_data)
        vector_prefix = "set{}count{}".format(test_data['set'], test_data['count'])
        for key in ('key', 'plain', 'cipher'):
            if key in test_data:
                array_data = byte_string_to_c_array_init(test_data[key])
                print("const uint8_t {}{}[] = {{ {} }};".format(vector_prefix, key, array_data))

        print("const vector_data_t {} = {{".format(vector_prefix))
        print("    .set_num = {},".format(test_data['set']))
        print("    .count = {},".format(test_data['count']))
        for key in ('key', 'plain', 'cipher'):
            if key in test_data:
                print("    .{} = {}{},".format(key, vector_prefix, key))
            else:
                print("    .{} = NULL,".format(key))
        print("};\n")
        vectors_list.append(vector_prefix)

    print("const vector_data_t * const test_vectors[] = {")
    for vector_name in vectors_list:
        print("    &{},".format(vector_name))
    print("};\n")

    print("const char * const set_names[] = {")
    for set_name in set_names:
        print('    {},'.format(c_escaped_string(set_name)))
    print("};\n")

if __name__ == "__main__":
    main()

